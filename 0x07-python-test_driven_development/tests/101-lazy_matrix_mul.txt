=============================================================
                The 101-lazy_matrix_mul test
=============================================================
    This is a python test file using the doctest method

    TESTS: ../101-lazy_matrix_mul 
--------------------------------------------------------------

    Expected Usage / behavious Example
--------------------------------------------------------------
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]) # int input
    array([[ 7, 10],
           [15, 22]])

    >>> lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [[1.0, 2.0], [3.0, 4.0]]) # float input
    array([[ 7., 10.],
           [15., 22.]])

--------------------------------------------------------------

    Expected Errors
--------------------------------------------------------------

    >>> lazy_matrix_mul("la", "moulada") # 1st operand raised
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[1.5, 2, 3], [5, 6, 7]], 90) # 2nd operand raised
    Traceback (most recent call last):
    ValueError: matmul: Input operand 1 does not have enough dimensions (has 0, gufunc core with signature (n?,k),(k,m?)->(n?,m?) requires 1)

    >>> lazy_matrix_mul([[1.5, 2, 3], [5, 6, 7]], [1.9, 8, 9]) # are the operands list elements lists?
    array([ 45.85, 120.5 ])

    >>> lazy_matrix_mul([[]], [[1.5, 2, 3], [5, 6, 7]]) # are the operands lists empty?
    Traceback (most recent call last):
    ValueError: shapes (1,0) and (2,3) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> lazy_matrix_mul([[1.0, 2.0], [3.0, 4.0]], [['88', 2.0], [3.0, 4.0]]) # a bad element in a list of lists?
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, 2], [3, 4, 9]], [[1, 2], [3, 4]]) # equal row lenght per matrix?
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [8, 0]]) # equal row of m_a and col of m_b? check the posibilty of matrx_mul
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
